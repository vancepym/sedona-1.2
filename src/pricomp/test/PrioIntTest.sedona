//
// Copyright (c) 2011 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   11 Jan 12  Elizabeth McKenney  Creation
//

**
** PrioIntTest
**
class PrioIntTest
  extends Test
{
  static inline PrioritizedInt  f

  //
  // Test sequence adapted from ControlTest.verifyPriorityAlgorithm()
  //
  static void test()
  {
    //Sys.out.print("Check value of PrioritizedInt.NULLVAL = ")
    //Sys.out.print("${PrioritizedInt.NULLVAL} (0x${Sys.hexStr(PrioritizedInt.NULLVAL)})\n")

    ////////////////////////////////////////////////////////////////
    // Initial values (??)
    ////////////////////////////////////////////////////////////////

    // Check output & sourceLevel for defaults
    assert(f.out==0)                               // property should be init to Sys.minInt??
    assert(f.sourceLevel==PrioritizedInt.FB_LEVEL)   // init level is FB_LEVEL
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.fallback))  // should be same


    ////////////////////////////////////////////////////////////////
    // Direct setting of input properties
    ////////////////////////////////////////////////////////////////

    // Set in1 directly
    f.in1 = 1
    f.execute()
    assert(f.out==1)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.in1))

    // Relinquish in1 
    f.setToDefault(PrioritizedInt.in1)
    f.execute()
    assert(f.out==PrioritizedInt.NULLVAL)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.fallback))

    // Set in16 directly
    f.in16 = 16 
    f.execute()
    assert(f.out==16)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.in16))

    // Set in9 directly
    f.in9 = 9 
    f.execute()
    assert(f.out==9)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.in9))

    // Relinquish in9 
    f.setToDefault(PrioritizedInt.in9)
    f.execute()
    assert(f.out==16)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.in16))

    // Relinquish in16 
    f.setToDefault(PrioritizedInt.in16)
    f.execute()
    assert(f.out==PrioritizedInt.NULLVAL)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.fallback))


    ////////////////////////////////////////////////////////////////
    // Actions
    ////////////////////////////////////////////////////////////////

    // Test emergency set action
    f.emergencySet(1)
    f.execute()
    assert(f.out==1)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.in1))

    // Test emergency auto action
    f.emergencyAuto()
    f.execute()
    assert(f.out==PrioritizedInt.NULLVAL)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.fallback))

    // Test manual set action with expiration
    verifyManualSet(8, 1000)
    // Test manual set action with no expiration
    verifyManualSet(8, 0)
  }


  //
  // Test manual set and duration
  //
  static void verifyManualSet(int setval, int dur)
  {
    Sys.out.print("  Testing manual set to $setval")
    if (dur==0) Sys.out.print(" ended by manualAuto action\n")
    else Sys.out.print(" for $dur ms\n")

    long comboValue = ((long)setval<<32) | (long)dur   

    f.manualSet(comboValue)

    // Verify action succeeded
    f.execute()
    assert(f.out==setval)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.in8))

    // Verify correct value for duration (or 2sec if Permanent)
    long expTime 
    if (dur==0) 
      expTime = Sys.ticks() + 2sec
    else
      expTime = f.overrideExpTime

    while (Sys.ticks() <= expTime)
    {
      f.execute()
      assert(f.out==setval)
      assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.in8))
      Sys.sleep(100ms)
    }

    // If duration is Permanent, use manualAuto action to end immediately
    if (dur==0) f.manualAuto()

    // Call execute() once more to propagate state to output
    f.execute()

    // Either way, should be done now
    //Sys.out.print("After loop, out = ${f.out} (should be ${PrioritizedInt.NULLVAL})\n")
    assert(f.out==PrioritizedInt.NULLVAL)
    assert(f.sourceLevel==Prioritized.getSlotLevel(PrioritizedInt.fallback))
  }



}
