//
// Copyright (c) 2012 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   26 Oct 11  Elizabeth McKenney  Creation
//

**
** PrioritizedInt 
**
class PrioritizedInt
  extends Prioritized
{

  //define int NULLVAL = Sys.minInt        // can't do this - Sys.minInt is define, not literal
  int NULLVAL = Sys.minInt

////////////////////////////////////////////////////////////////
// Properties
////////////////////////////////////////////////////////////////

  @readonly 
  @summary=false property int in1 = Sys.minInt

  @summary=false property int in2 = Sys.minInt
  @summary=false property int in3 = Sys.minInt
  @summary=false property int in4 = Sys.minInt
  @summary=false property int in5 = Sys.minInt
  @summary=false property int in6 = Sys.minInt
  @summary=false property int in7 = Sys.minInt

  @readonly 
  @summary=false property int in8 = Sys.minInt

  @summary=false property int in9 = Sys.minInt
  @summary=true  property int in10 = Sys.minInt
  @summary=false property int in11 = Sys.minInt
  @summary=false property int in12 = Sys.minInt
  @summary=false property int in13 = Sys.minInt
  @summary=false property int in14 = Sys.minInt
  @summary=false property int in15 = Sys.minInt
  @summary=true  property int in16 = Sys.minInt

  @config 
  @summary=false property int fallback = Sys.minInt

  @readonly 
  @summary=true  property int out


////////////////////////////////////////////////////////////////
// Actions
////////////////////////////////////////////////////////////////

  action void emergencySet(int newValue)
  {
    in1 = newValue
  }

  action void emergencyAuto()
  {
    setToDefault(PrioritizedInt.in1)
  }

  ** 
  ** manualSet - Override value.
  **  Arg to action is 8-byte long; first 4 bytes are new value,
  **    last 4 are override duration in milliseconds.
  **
  action void manualSet(long valAndExpTime)
  {
    in8 = (int)(valAndExpTime>>32)
    overrideExpTime = (valAndExpTime & 0xffffffffL) * 1ms
    if (overrideExpTime>0L) overrideExpTime += Sys.ticks()
  }

  action void manualAuto()
  {
    setToDefault(PrioritizedInt.in8)
    overrideExpTime = 0L
  }




////////////////////////////////////////////////////////////////
// Component
////////////////////////////////////////////////////////////////

  **
  ** Execute is called once every scan using the
  ** simple round-robin scan engine.
  **
  override virtual void execute()
  {
    int value = fallback
    int level = FB_LEVEL

    // Expire manual override if any 
    if ( (overrideExpTime>0L) && (Sys.ticks()>overrideExpTime) )
      manualAuto()

    // Step through slot list, looking for highest active input (lowest level#)
    foreach (Slot s : this.type.slots, this.type.slotsLen)
    {
      int lev = getSlotLevel(s)
      if (lev==MAXLEVEL) continue          // MAXLEVEL here indicates slot not relevant

      int ival = getInt(s)
      if (ival==NULLVAL) continue          // can't test (ival!=NULLVAL) - always true???

      if (level>=lev)
      {
        value = ival
        level = lev
      }
    }
    
    // Update output value & level
    out         = value
    sourceLevel = level
  }

  

////////////////////////////////////////////////////////////////
// Fields
////////////////////////////////////////////////////////////////

}
