//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:

**
** PrioritizedBool 
**
class PrioritizedBool
  extends Component
{

////////////////////////////////////////////////////////////////
// Properties
////////////////////////////////////////////////////////////////

  @readonly 
  @summary=false property bool in1

  @summary=false property bool in2
  @summary=false property bool in3
  @summary=false property bool in4
  @summary=false property bool in5

  @readonly 
  @summary=false property bool in6

  @summary=false property bool in7

  @readonly 
  @summary=false property bool in8

  @summary=false property bool in9
  @summary=true  property bool in10
  @summary=false property bool in11
  @summary=false property bool in12
  @summary=false property bool in13
  @summary=false property bool in14
  @summary=false property bool in15
  @summary=true  property bool in16

  @readonly 
  @summary=false property bool fallback

  @readonly 
  @summary=true  property bool out

  @readonly 
  @range=srcLevelStr
  @summary=false property int sourceLevel = MAXLEVEL

  @readonly 
  @summary=false property long overrideExpTime = 0L    // 0 indicates no timeout ("permanent")


  @config 
  @unit=Units.millisecond
  @summary=false property int minActiveTime = 0

  @config 
  @unit=Units.millisecond
  @summary=false property int minInactiveTime = 0


  define Str srcLevelStr= "in0, emergency, in2, in3, in4, in5, in6, in7, override, in9, in10, in11, in12, in13, in14, in15, in16, fallback"


////////////////////////////////////////////////////////////////
// Unlinkable input properties
////////////////////////////////////////////////////////////////

  // Only need to cache status for unlinkable inputs
  bool use_in1      = false
  bool use_in6      = false
  bool use_in8      = false


////////////////////////////////////////////////////////////////
// Actions
////////////////////////////////////////////////////////////////

  action void emergencySetActive()
  {
    in1 = true
    use_in1 = true
  }

  action void emergencySetInactive()
  {
    in1 = false
    use_in1 = true
  }

  action void emergencyAuto()
  {
    setToDefault(PrioritizedBool.in1)
    use_in1 = false
  }

  action void manualSetActive(int expTime)
  {
    in8 = true
    use_in8 = true

    overrideExpTime = (long)expTime * 1ms
    if (overrideExpTime>0L) overrideExpTime += Sys.ticks()
  }

  action void manualSetInactive(int expTime)
  {
    in8 = false
    use_in8 = true

    overrideExpTime = (long)expTime * 1ms
    if (overrideExpTime>0L) overrideExpTime += Sys.ticks()
  }

  action void manualAuto()
  {
    setToDefault(PrioritizedBool.in8)
    use_in8 = false
    overrideExpTime = 0L
  }


  action void setFallback(bool newValue)
  {
    fallback = newValue
  }



////////////////////////////////////////////////////////////////
// Component
////////////////////////////////////////////////////////////////

  **
  ** Execute is called once every scan using the
  ** simple round-robin scan engine.
  **
  override virtual void execute()
  {
    bool value = out
    int  level = MAXLEVEL

    // Step through linksTo list & select highest level linkable input
    for (Link link = linksTo; link != null; link = link.nextTo)
    {
      Slot s = type.slot(link.toSlot)

      int lev = getSlotLevel(s)
      if (lev==MAXLEVEL) continue          // MAXLEVEL here indicates error

      if (level>=lev)
      {
        value = getBool(s)
        level = lev
      }
    }
    

    // Expire manual override if any 
    if ( (overrideExpTime>0L) && (Sys.ticks()>overrideExpTime) )
      manualAuto()


    // Expire active timeout if any 
    if ( (minActiveEndTime>0L) && (Sys.ticks()>minActiveEndTime) )
      minActiveEndTime = 0L

    // Expire inactive timeout if any 
    if ( (minInactiveEndTime>0L) && (Sys.ticks()>minInactiveEndTime) )
      minInactiveEndTime = 0L

    // If both min active & inactive times have expired, stop using in6
    if ( (minActiveEndTime==0L) && (minInactiveEndTime==0L) )
    {
      setToDefault(PrioritizedBool.in6)
      use_in6 = false
    }



    // Check unlinkable inputs, override links if appropriate
    if (use_in1)
    {
      value = in1
      level = 1
    }
    else if (use_in6 && (level>=6))        
    {
      value = in6
      level = 6
    }
    else if (use_in8 && (level>=8))        
    {
      value = in8
      level = 8
    }
    else if (level>=FB_LEVEL)
    {
      value = fallback
      level = FB_LEVEL
    }


    // Update output value
    //  TODO: Have WB field editor translate FB and MAX levels to text descriptions?
    out         = value
    sourceLevel = level


    // Start min active/inactive timer if appropriate
    if (out!=prevOut)
    {
      if (out && (minActiveTime>0))
      {
        in6 = true
        use_in6 = true
        minActiveEndTime = Sys.ticks() + ((long)minActiveTime * 1ms)
      }
      else if (!out && (minInactiveTime>0))
      {
        in6 = false
        use_in6 = true
        minInactiveEndTime = Sys.ticks() + ((long)minInactiveTime * 1ms)
      }
      prevOut = out
    }
  }

  

////////////////////////////////////////////////////////////////
// Util
////////////////////////////////////////////////////////////////

  int getSlotLevel(Slot slot)
  {
    if (slot.name.startsWith("in"))
      return Str.fromBytes(slot.name.toBytes(), 2).parseInt()
    if (slot.name.equals("fallback"))
      return FB_LEVEL
    return MAXLEVEL
  }


////////////////////////////////////////////////////////////////
// Constants
////////////////////////////////////////////////////////////////

  define int FB_LEVEL  =  17   // "level" for fallback input
  define int MAXLEVEL  = 256   // lowest possible input level


////////////////////////////////////////////////////////////////
// Fields
////////////////////////////////////////////////////////////////

  bool prevOut = false

  long minActiveEndTime   = 0L
  long minInactiveEndTime = 0L

}
